// <auto-generated />
using System;
using CounterStrikeItemsApi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CounterStrikeItemsApi.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250814073556_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HexColor")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.CollectionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("CollectionTypes");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Exterior", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Exteriors");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Found", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ContainerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemCommonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("ItemCommonId");

                    b.ToTable("Founds");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.GraffitiColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HexColor")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("GraffitiColors");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExteriorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GraffitiColorId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageId")
                        .HasColumnType("text");

                    b.Property<Guid>("ItemCommonId")
                        .HasColumnType("uuid");

                    b.Property<long?>("ItemNameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("QualityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ExteriorId");

                    b.HasIndex("GraffitiColorId");

                    b.HasIndex("ItemCommonId");

                    b.HasIndex("QualityId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Items");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.ItemCommon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfessionalPlayerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubtypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TournamentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("ProfessionalPlayerId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("SubtypeId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TypeId");

                    b.ToTable("ItemCommons");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.ItemOrdersHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("HighestBuyOrder")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<long?>("LowestSellOrder")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemOrdersHistories");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.ItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.ItemTypeSubtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ItemTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubtypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("SubtypeId");

                    b.ToTable("ItemTypeSubtypes");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.ProfessionalPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("ProfessionalPlayers");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Quality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HexColor")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Qualities");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.SteamUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SteamId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SteamUsers");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Subtype", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Subtypes");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Collection", b =>
                {
                    b.HasOne("CounterStrikeItemsApi.Domain.Models.CollectionType", "Type")
                        .WithMany("Collections")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Found", b =>
                {
                    b.HasOne("CounterStrikeItemsApi.Domain.Models.ItemCommon", "Container")
                        .WithMany("FoundsAsContainer")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CounterStrikeItemsApi.Domain.Models.ItemCommon", "ItemCommon")
                        .WithMany("FoundsAsItem")
                        .HasForeignKey("ItemCommonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Container");

                    b.Navigation("ItemCommon");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Item", b =>
                {
                    b.HasOne("CounterStrikeItemsApi.Domain.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId");

                    b.HasOne("CounterStrikeItemsApi.Domain.Models.Exterior", "Exterior")
                        .WithMany("Items")
                        .HasForeignKey("ExteriorId");

                    b.HasOne("CounterStrikeItemsApi.Domain.Models.GraffitiColor", "GraffitiColor")
                        .WithMany("Items")
                        .HasForeignKey("GraffitiColorId");

                    b.HasOne("CounterStrikeItemsApi.Domain.Models.ItemCommon", "ItemCommon")
                        .WithMany("Items")
                        .HasForeignKey("ItemCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CounterStrikeItemsApi.Domain.Models.Quality", "Quality")
                        .WithMany("Items")
                        .HasForeignKey("QualityId");

                    b.Navigation("Category");

                    b.Navigation("Exterior");

                    b.Navigation("GraffitiColor");

                    b.Navigation("ItemCommon");

                    b.Navigation("Quality");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.ItemCommon", b =>
                {
                    b.HasOne("CounterStrikeItemsApi.Domain.Models.Collection", "Collection")
                        .WithMany("ItemCommons")
                        .HasForeignKey("CollectionId");

                    b.HasOne("CounterStrikeItemsApi.Domain.Models.ProfessionalPlayer", "ProfessionalPlayer")
                        .WithMany("ItemCommons")
                        .HasForeignKey("ProfessionalPlayerId");

                    b.HasOne("CounterStrikeItemsApi.Domain.Models.Subtype", "Subtype")
                        .WithMany("ItemCommons")
                        .HasForeignKey("SubtypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CounterStrikeItemsApi.Domain.Models.Team", "Team")
                        .WithMany("ItemCommons")
                        .HasForeignKey("TeamId");

                    b.HasOne("CounterStrikeItemsApi.Domain.Models.Tournament", "Tournament")
                        .WithMany("ItemCommons")
                        .HasForeignKey("TournamentId");

                    b.HasOne("CounterStrikeItemsApi.Domain.Models.ItemType", "Type")
                        .WithMany("ItemCommons")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("ProfessionalPlayer");

                    b.Navigation("Subtype");

                    b.Navigation("Team");

                    b.Navigation("Tournament");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.ItemOrdersHistory", b =>
                {
                    b.HasOne("CounterStrikeItemsApi.Domain.Models.Item", "Item")
                        .WithMany("ItemOrdersHistories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.ItemTypeSubtype", b =>
                {
                    b.HasOne("CounterStrikeItemsApi.Domain.Models.ItemType", "ItemType")
                        .WithMany("Subtypes")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CounterStrikeItemsApi.Domain.Models.Subtype", "Subtype")
                        .WithMany("ItemTypes")
                        .HasForeignKey("SubtypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemType");

                    b.Navigation("Subtype");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("CounterStrikeItemsApi.Domain.Models.SteamUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Collection", b =>
                {
                    b.Navigation("ItemCommons");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.CollectionType", b =>
                {
                    b.Navigation("Collections");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Exterior", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.GraffitiColor", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Item", b =>
                {
                    b.Navigation("ItemOrdersHistories");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.ItemCommon", b =>
                {
                    b.Navigation("FoundsAsContainer");

                    b.Navigation("FoundsAsItem");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.ItemType", b =>
                {
                    b.Navigation("ItemCommons");

                    b.Navigation("Subtypes");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.ProfessionalPlayer", b =>
                {
                    b.Navigation("ItemCommons");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Quality", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Subtype", b =>
                {
                    b.Navigation("ItemCommons");

                    b.Navigation("ItemTypes");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Team", b =>
                {
                    b.Navigation("ItemCommons");
                });

            modelBuilder.Entity("CounterStrikeItemsApi.Domain.Models.Tournament", b =>
                {
                    b.Navigation("ItemCommons");
                });
#pragma warning restore 612, 618
        }
    }
}
